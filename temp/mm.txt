    private static final SI INSTANCE = new SI();
    public static final BaseUnit<ElectricCurrent> AMPERE = si(new BaseUnit<ElectricCurrent>(
    public static final BaseUnit<LuminousIntensity> CANDELA = si(new BaseUnit<LuminousIntensity>(
    public static final BaseUnit<Temperature> KELVIN = si(new BaseUnit<Temperature>(
    public static final BaseUnit<Mass> KILOGRAM = si(new BaseUnit<Mass>("kg"));
    public static final BaseUnit<Length> METRE = si(new BaseUnit<Length>("m"));
    public static final Unit<Length> METER = METRE;
    public static final BaseUnit<AmountOfSubstance> MOLE = si(new BaseUnit<AmountOfSubstance>(
    public static final BaseUnit<Duration> SECOND = si(new BaseUnit<Duration>(
    public static final Unit<Mass> GRAM = KILOGRAM.divide(1000);
    public static final AlternateUnit<Angle> RADIAN = si(new AlternateUnit<Angle>(
    public static final AlternateUnit<SolidAngle> STERADIAN = si(new AlternateUnit<SolidAngle>(
    public static final AlternateUnit<DataAmount> BIT = si(new AlternateUnit<DataAmount>(
    public static final AlternateUnit<Frequency> HERTZ = si(new AlternateUnit<Frequency>(
    public static final AlternateUnit<Force> NEWTON = si(new AlternateUnit<Force>(
    public static final AlternateUnit<Pressure> PASCAL = si(new AlternateUnit<Pressure>(
    public static final AlternateUnit<Energy> JOULE = si(new AlternateUnit<Energy>(
    public static final AlternateUnit<Power> WATT = si(new AlternateUnit<Power>(
    public static final AlternateUnit<ElectricCharge> COULOMB = si(new AlternateUnit<ElectricCharge>(
    public static final AlternateUnit<ElectricPotential> VOLT = si(new AlternateUnit<ElectricPotential>(
    public static final AlternateUnit<ElectricCapacitance> FARAD = si(new AlternateUnit<ElectricCapacitance>(
    public static final AlternateUnit<ElectricResistance> OHM = si(new AlternateUnit<ElectricResistance>(
    public static final AlternateUnit<ElectricConductance> SIEMENS = si(new AlternateUnit<ElectricConductance>(
    public static final AlternateUnit<MagneticFlux> WEBER = si(new AlternateUnit<MagneticFlux>(
    public static final AlternateUnit<MagneticFluxDensity> TESLA = si(new AlternateUnit<MagneticFluxDensity>(
    public static final AlternateUnit<ElectricInductance> HENRY = si(new AlternateUnit<ElectricInductance>(
    public static final Unit<Temperature> CELSIUS = si(KELVIN.plus(273.15));
    public static final AlternateUnit<LuminousFlux> LUMEN = si(new AlternateUnit<LuminousFlux>(
    public static final AlternateUnit<Illuminance> LUX = si(new AlternateUnit<Illuminance>(
    public static final AlternateUnit<RadioactiveActivity> BECQUEREL = si(new AlternateUnit<RadioactiveActivity>(
    public static final AlternateUnit<RadiationDoseAbsorbed> GRAY = si(new AlternateUnit<RadiationDoseAbsorbed>(
    public static final AlternateUnit<RadiationDoseEffective> SIEVERT = si(new AlternateUnit<RadiationDoseEffective>(
    public static final AlternateUnit<CatalyticActivity> KATAL = si(new AlternateUnit<CatalyticActivity>(
    public static final Unit<Velocity> METRES_PER_SECOND = si(new ProductUnit<Velocity>(
    public static final Unit<Velocity> METERS_PER_SECOND = METRES_PER_SECOND;
    public static final Unit<Acceleration> METRES_PER_SQUARE_SECOND = si(new ProductUnit<Acceleration>(
    public static final Unit<Acceleration> METERS_PER_SQUARE_SECOND = METRES_PER_SQUARE_SECOND;
    public static final Unit<Area> SQUARE_METRE = si(new ProductUnit<Area>(
    public static final Unit<Volume> CUBIC_METRE = si(new ProductUnit<Volume>(
    public static final Unit<Length> KILOMETRE = METER.times(1000);
    public static final Unit<Length> KILOMETER = KILOMETRE;
    public static final Unit<Length> CENTIMETRE = METRE.divide(100);
    public static final Unit<Length> CENTIMETER = CENTIMETRE;
    public static final Unit<Length> MILLIMETRE = METRE.divide(1000);
    public static final Unit<Length> MILLIMETER = MILLIMETRE;
    static final MultiplyConverter E24 = new MultiplyConverter(1E24);
    static final MultiplyConverter E21 = new MultiplyConverter(1E21);
    static final RationalConverter E18 = new RationalConverter(
    static final RationalConverter E15 = new RationalConverter(
    static final RationalConverter E12 = new RationalConverter(1000000000000L,
    static final RationalConverter E9 = new RationalConverter(1000000000L, 1);
    static final RationalConverter E6 = new RationalConverter(1000000L, 1);
    static final RationalConverter E3 = new RationalConverter(1000L, 1);
    static final RationalConverter E2 = new RationalConverter(100L, 1);
    static final RationalConverter E1 = new RationalConverter(10L, 1);
    static final RationalConverter Em1 = new RationalConverter(1, 10L);
    static final RationalConverter Em2 = new RationalConverter(1, 100L);
    static final RationalConverter Em3 = new RationalConverter(1, 1000L);
    static final RationalConverter Em6 = new RationalConverter(1, 1000000L);
    static final RationalConverter Em9 = new RationalConverter(1, 1000000000L);
    static final RationalConverter Em12 = new RationalConverter(1,
    static final RationalConverter Em15 = new RationalConverter(1,
    static final RationalConverter Em18 = new RationalConverter(1,
    static final MultiplyConverter Em21 = new MultiplyConverter(1E-21);
    static final MultiplyConverter Em24 = new MultiplyConverter(1E-24);
    public static final Unit<Velocity> METRE_PER_SECOND = METRES_PER_SECOND;
    public static final Unit<Acceleration> METRE_PER_SQUARE_SECOND = METRES_PER_SQUARE_SECOND;
